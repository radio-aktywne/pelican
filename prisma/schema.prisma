datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

generator client {
  // Global settings
  provider = "prisma-client-py"

  // Settings for "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = -1
}

/// Media data
model Media {
  /// Identifier of the media
  id   String @id(map: "media_pkey") @default(uuid()) @map("id") @db.Uuid
  /// Name of the media
  name String @unique(map: "media_name_unique") @map("name") @db.Text

  /// Bindings that the media belongs to
  bindings Binding[]

  @@map("media")
}

/// Playlist data
model Playlist {
  /// Identifier of the playlist
  id   String @id(map: "playlists_pkey") @default(uuid()) @map("id") @db.Uuid
  /// Name of the playlist
  name String @unique(map: "playlists_name_unique") @map("name") @db.Text

  /// Bindings that the playlist belongs to
  bindings Binding[]

  @@map("playlists")
}

/// Binding between playlists and media
model Binding {
  /// Identifier of the binding
  id         String @id(map: "bindings_pkey") @default(uuid()) @map("id") @db.Uuid
  /// Identifier of the playlist
  playlistId String @map("playlist_id") @db.Uuid
  /// Identifier of the media
  mediaId    String @map("media_id") @db.Uuid
  /// Rank of the media in the playlist
  rank       String @map("rank") @db.Text

  /// Playlist that the binding belongs to
  playlist Playlist @relation(fields: [playlistId], references: [id], map: "bindings_playlist_id_fkey", onDelete: Cascade, onUpdate: Cascade)
  /// Media that the binding belongs to
  media    Media    @relation(fields: [mediaId], references: [id], map: "bindings_media_id_fkey", onDelete: Cascade, onUpdate: Cascade)

  @@unique([playlistId, rank], map: "bindings_playlist_id_rank_unique")
  @@map("bindings")
}
